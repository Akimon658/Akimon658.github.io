[{"content":"めっちゃ速い静的サイトジェネレータとして定評のある Hugo ですが、その分動的な処理ができないので色々と工夫する必要があります。 関連記事やタグなど一般的なブログに必要な機能は標準で搭載されているし、shortcodes を使えば複雑な HTML も簡単に入れられますが、外部サイトからは JSON か CSV しか取得できないので URL からリンクカードを生成しようと思ったら API サーバーを立てて経由させなければなりません。\nとはいえビルド時にしか使わないのに外部のレンタルサーバーを使ったりするのは無駄が多いし、ローカルでプレビューするときも使えるような汎用性の高さも必要です。 ということで簡単な Docker イメージを作って GitHub Actions で使ってみたいと思います。\n完成品はこちら。\nGitHub - Akimon658/ogjson: A simple server to get JSON from OG meta tags github.com A simple server to get JSON from OG meta tags. Contribute to Akimon658/ogjson development by creating an account on GitHub.    Open Graph から JSON を生成 これについては otiai10/opengraph というドンピシャなライブラリがあったのでそのまま使わせていただきました。\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/otiai10/opengraph\u0026#34; ) func main() { http.HandleFunc(\u0026#34;/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { og, err := opengraph.Fetch(r.FormValue(\u0026#34;url\u0026#34;)) if err != nil { http.Error(w, err.Error(), http.StatusInternalServerError) } w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) err = json.NewEncoder(w).Encode(og) if err != nil { http.Error(w, err.Error(), http.StatusInternalServerError) } }) // 0.0.0.0 なのはコンテナの外からアクセスする時に localhost や 127.0.0.1 だと上手くいかないからです。もっと良い方法があったら教えてください＞＜ \tlog.Fatal(http.ListenAndServe(\u0026#34;0.0.0.0:8080\u0026#34;, nil)) } あとは適当にビルドすれば OK です。\nFROMgolang:1.17.7-bullseye AS builderWORKDIR/go/src/ogjsonCOPY . .RUN go installFROMgcr.io/distroless/base-debian11COPY --from=builder /go/bin/ogjson /ogjsonCMD [\u0026#34;/ogjson\u0026#34;]これで docker run --rm -p 8080:8080 \u0026lt;image\u0026gt; を実行すれば http://localhost:8080/?url=https://example.com みたいな感じで JSON が取得できるようになると思います。\nサービスコンテナを使う  サービスコンテナは、ワークフロー中でアプリケーションをテストもしくは運用するのに必要になるかもしれないサービスをホストするための、シンプルでポータブルな方法を提供するDockerコンテナです。 たとえば、ワークフローでデータベースやメモリキャッシュへのアクセスを必要とする結合テストを実行する必要があるかもしれません。\n サービスコンテナについて - GitHub Docs docs.github.com サービスコンテナを使って、データベース、Webサービス、メモリキャッシュ、あるいはその他のツールをワークフローに接続できます。    説明がふわっとしていますが、とにかくワークフローの中で Docker コンテナを動かせるようです。\njobs:# 任意のジョブ名build:runs-on:ubuntu-latestservices:# 任意のサービス名ogjson:# Docker Hub のイメージ名image:akimon658/ogjson:1.0.0ports:- 8080:8080これだけ追記すれば Actions 内で JSON の取得を完結させられます。\nShortcode の設定 Shortcodes は layouts/shortcodes/ 以下に作ります。 ファイル名がそのまま shortcode の名前になるので好きな名前にしてください。\n以下は僕のブログで使っているものです。\n\u0026lt;!-- 引数、JSON を取得 --\u0026gt; {{ $url := .Get 0 }} {{ $json := getJSON \u0026#34;http://localhost:8080/?url=\u0026#34; $url }} \u0026lt;!-- 外部リンクは target=\u0026#34;_blank\u0026#34; をつけて開く --\u0026gt; \u0026lt;a href=\u0026#34;{{ $url | safeURL }}\u0026#34;{{ if strings.HasPrefix $url \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;{{ end }}\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-meta\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-title\u0026#34;\u0026gt;{{ $json.Title }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-host\u0026#34;\u0026gt;{{ $json.URL.Host }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-description\u0026#34;\u0026gt;{{ $json.Description }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Image は配列になっているので最初の1枚だけ使う --\u0026gt; {{ range first 1 $json.Image }} \u0026lt;img src=\u0026#34;{{ .URL }}\u0026#34; alt=\u0026#34;{{ .Alt }}\u0026#34;\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; ここではタイトル、ドメイン、descriptionと画像を使っていますが、他にも色々取得できると思います。 CSS は頑張って良い感じにしてください。\nShortcode を呼び出す {{\u0026lt; card \u0026#34;https://zenn.dev\u0026#34; \u0026gt;}} ということで、それっぽいものが作れました。\nあとがき Hugo はいいぞ。\nThe world’s fastest framework for building websites gohugo.io The world’s fastest framework for building websites    ","date":"2022-02-28","permalink":"https://akimon658.github.io/p/2022/hugo-url-cards/","tags":null,"title":"GitHub Actions のサービスコンテナを使って Hugo のビルド時にリンクカードを生成する"},{"content":"結論 window.disqus_config = function() { this.language = \u0026#39;{{ .Lang }}\u0026#39;; } 解説 Disqus 公式のヘルプを見ると、\nvar disqus_config = function () { this.language = \u0026#34;ja\u0026#34;; }; このように言語設定を上書きできるとあります。\nなので HTML テンプレートのどこかに\nvar disqus_config = function () { this.language = \u0026#39;{{ .Lang }}\u0026#39;; }; こう書いておけば基本的には良いんですが、これだと hugo --minify した時に変数名 disqus_config が短縮されて違う名前になってしまうので意味が無くなります。\nしかし、JavaScript におけるグローバル変数は window オブジェクトのプロパティとして扱えるので以下のような書き方が可能です。\nwindow.disqus_config = function() { this.language = \u0026#39;{{ .Lang }}\u0026#39; } これなら minify しても名前が変わってしまうことはありません。\n参考：\nGlobal object (グローバルオブジェクト) - MDN Web Docs 用語集: ウェブ関連用語の定義 | MDN developer.mozilla.org グローバルオブジェクトは、グローバルスコープ上に常時存在するオブジェクトです。    おまけ Hugo には公式の Disqus テンプレートがありますが、そこでも var disqus_config が使われていたのでプルリクを送ったところマージされました。 ショボいけど初めて OSS に直接コントリビュートできたので嬉しいです。\nChange `disqus_config` to `window.disqus_config` by Akimon658 · Pull Request #9550 · gohugoio/hugo github.com The variable disqus_config doesn\u0026#39;t work if we use hugo --minify because Hugo changes the name. We can use window.disqus_config instead, and it won\u0026#39;t be renamed. Reference: https://developer.mozilla...    ","date":"2022-01-24","permalink":"https://akimon658.github.io/p/2022/disqus-multi-lang/","tags":["Hugo"],"title":"Hugo で Disqus を多言語対応させる"},{"content":"このブログは Hugo を使って運用しています。 多機能なのに高速でめちゃくちゃ便利なんですが、リンクを貼ると後ろに余計な半角スペースが入ってしまって気持ち悪かったので原因を調べました。\n問題点 This is [test](https://example.com), just a [sample](https://sample.test). これが\nこうなる。（カンマ、ピリオドの前に余計なスペースが入っている）\n※紛らわしいんですが、この記事で半角スペースが入っているのは僕が日本語とアルファベットの間に空白を入れる派だからであって上記の問題は解決してあります。 多分\n原因 layouts/_default/_markup/render-link.html の最後に改行が入っているせいでした。\nrender-link.html について Hugo には Render Hooks という機能があります。 HTML の生成に割り込み、例えば render-link.html を使うと外部リンクを target=\u0026quot;_blank\u0026quot; で開くといったことができる機能です。 ただ、Hugo 内部で使われている goldmark という Markdown パーサーのバグなのか仕様なのかスペースが入ってしまうみたいです。\n当サイトのテーマのベースになっている Fuji ではしっかり対処されていましたが、アレンジする時に自分で改行を入れたので自業自得でした。\nあとがき 同じような issue が既に立っていました。 各自で改行を入れないように気をつけてくれというスタンスみたいで、Vim を使っていると勝手に末尾に改行が入ってしまうので面倒臭いです。\n","date":"2022-01-24","permalink":"https://akimon658.github.io/p/2022/hugo-whitespace/","tags":["Hugo"],"title":"Hugo でリンクの後に余分な空白が挿入されてしまう現象"},{"content":"GitHub に自分用の Dockerfile を置いていたら DeeloCloud なるサービスの owner を名乗る方からメールが来ました。 見るからに怪しさ全開でしたが、すぐにスパムと決めつけるのは良くないと思ったのでちゃんと調べることにしました。\nDeeloCloud とは  Easily deploy and host your apps\nDeeloCloud handles the deployment and hosting of your backend and frontend apps so that you can focus on building instead of managing infrastructure.\n だそうです（公式サイトより）。 リポジトリの変更を検知して勝手にデプロイしてくれるんだとか。\nまぁ Readme 読めば Web サービスじゃないと分かるリポジトリに対して「そのプロジェクト、うちで無料でホスティングしないか？」みたいなメールを送ってきていたので、そもそも使う気は無いんですけどね。\nめちゃくちゃ怪しい 薄っぺらいドキュメント 書かれているのはほぼさっき引用したのと同じで、具体的なことが一切書かれていません。 ログインしたら何か変わる可能性もありますが……。\nGitHub でのサインアップ まず、メールアドレス等でのアカウント作成はできず GitHub との連携が必須です。 これはまだ GitHub との連携が前提のサービスなので分かりますが、問題は許可しなきゃいけない権限が多すぎること。 メールアドレスやプロフィールの読み取りはもちろん、\n This application will be able to read and write all public and private repository data. This includes the following:\n Code Issues Pull requests Wikis Settings Webhooks and services Deploy keys Collaboration invites   ……。潔いですね。\nもちろん定型文メール 当たり前ですが僕が受け取ったのと全く同じ内容のメールを受け取っている人がいました。 2022年に入った辺りから増えているみたいです。 GitHub で公開しているメールアドレスにバンバン送っているみたいで、keras-team という organization に設定されているのが Keras-usersという Google グループのアドレスだったせいでメーリングリストにスパムが紛れ込むのはこの世の終わりみたいでちょっと笑ったりしました。\nあとがき 仮に詐欺じゃなかったとしても、無料プランだと RAM 250 MB しかないので使わないよ……。\n","date":"2022-01-10","permalink":"https://akimon658.github.io/p/2022/deelocloud/","tags":null,"title":"DeeloCloud なる会社？からメールが来た"},{"content":"WSLg があるのでまぁそれでも良いんですが、Windows 側に統一できた方が楽なので。 ちなみに Debian です。\nsudo update-alternatives --install /usr/bin/x-www-browser x-www-browser 使いたいブラウザへのパス 優先度 例：\nsudo update-alternatives --install /usr/bin/x-www-browser x-www-browser /mnt/c/Program\\ Files/Google/Chrome/Application/chrome.exe 1 WSL 側にブラウザが無いならこれで終わりです。 あっても次の方法でデフォルトを設定できるので、優先度は適当でいいと思います。\nsudo update-alternatives --config x-www-browser これで Windows のブラウザを WSL のデフォルトブラウザとして使えるようになりました。\n","date":"2021-12-31","permalink":"https://akimon658.github.io/p/2021/wsl-default-browser/","tags":null,"title":"Windows のブラウザを WSL のデフォルトとして使用する"},{"content":"Gitpod では最初から全部入りの gitpod/workspace-full というコンテナを使えるので、基本的にはこれを使っていれば事足ります。 ただ今回は MeCab という形態素解析エンジンと Golang で遊びたかったので、別で作っておいたイメージを使用しようとしました。 しかし permission 関係でちょっと詰まったので記事にしておこうと思います。\nGitpod について ブラウザから使える開発環境です。 まだ GitHub Codespaces が使えず、また GitHub Education の特典で月100時間無料で使えるのでお世話になっています。\nDashboard — Gitpod gitpod.io     やりたかったこと # 自作イメージFROMakimon658/go-mecab-neologd:latest# gopls が入っていないので入れたいRUN go install golang.org/x/tools/gopls@latestこの後適宜 go get などを実行できれば良い。\n詰まったところ /go/pkg 以下へのアクセスが全て Permission denied となってしまい go get できない。\n原因 上記の Dockerfile で go install が root として実行されてしまっているのが原因です。 なので sudo すれば解決しますが入っていないしやりたくないです。 ちなみに公式イメージでは USER が適切に設定されているのでこういったことは起こりません。\n解決策 FROMakimon658/go-mecab-neologd:latestRUN go install golang.org/x/tools/gopls@latest \u0026amp;\u0026amp; \\  chmod 777 -R /gochmod 777 は全てのユーザーに指定した場所への読み書き・実行を許可するコマンド、-R はそれを対象ディレクトリの中身にも適用するオプションです。 これを必要なところに設定しましょう。 777 だと過剰かもしれませんが面倒だったので。\nchmod について詳しくは以下の記事がとても参考になります。\nLinuxの権限確認と変更(chmod)（超初心者向け） - Qiita qiita.com ファイル・ディレクトリの権限（パーミッション）の確認方法と変更方法 以下のようなコマンドの謎の数字や $ chmod 777 hoge.txt 以下のような一覧のrやwなど謎の英文字について -rw-r--r-- 1 ...    あとがき 原因はすぐに分かりましたが Linux の権限周りの仕組みを全く知らなかったので解決策に辿り着くまでに1時間ぐらい溶かしました。\n","date":"2021-12-20","permalink":"https://akimon658.github.io/p/2021/gitpod-permission/","tags":null,"title":"Gitpod で自作の Docker イメージを使おうとして permission 関係で詰まった"},{"content":"PowerShell はデフォルトで現在のフルパスを表示しますが、Bash のようにホームディレクトリを ~ で置き換えてほしかったのでカスタマイズしてみました。\nProfile の準備 Bash でいう .bashrc のように、起動時に読み込まれるファイルに任意の処理を書くことで色々とカスタマイズできます。ただデフォルトでは存在しないので、touch $profile などで作成する必要があります。\nカスタマイズ 見た目に関する処理は prompt 関数に書きます。 デフォルトではこんな感じです。\nfunction prompt { $(if (Test-Path variable:/PSDebugContext) { \u0026#39;[DBG]: \u0026#39; } else { \u0026#39;\u0026#39; }) + \u0026#39;PS \u0026#39; + $(Get-Location) + $(if ($NestedPromptLevel -ge 1) { \u0026#39;\u0026gt;\u0026gt;\u0026#39; }) + \u0026#39;\u0026gt; \u0026#39; } 参考：\nプロンプトについて - PowerShell docs.microsoft.com 関数について説明 `Prompt` し、カスタム関数を作成する方法を示し `Prompt` ます。    カレントディレクトリの取得に $(Get-Location) が使われていますが、これだと文字列として扱うことができません（$pwd も同様）。そこで Convert-Path を使います。\nfunction prompt { $currentDir = (Convert-Path .) $(if (Test-Path variable:/PSDebugContext) { \u0026#39;[DBG]: \u0026#39; } else { \u0026#39;\u0026#39; }) + \u0026#39;PS \u0026#39; + $currentDir + $(if ($NestedPromptLevel -ge 1) { \u0026#39;\u0026gt;\u0026gt;\u0026#39; }) + \u0026#39;\u0026gt; \u0026#39; } これで文字列として扱えるようになりました。あとは $home が含まれているかチェックして置換するだけです。\nfunction prompt { $currentDir = (Convert-Path .) if ($currentDir.Contains($HOME)) { $currentDir = $currentDir.Replace($HOME, \u0026#34;~\u0026#34;) } $(if (Test-Path variable:/PSDebugContext) { \u0026#39;[DBG]: \u0026#39; } else { \u0026#39;\u0026#39; }) + \u0026#39;PS \u0026#39; + $currentDir + $(if ($NestedPromptLevel -ge 1) { \u0026#39;\u0026gt;\u0026gt;\u0026#39; }) + \u0026#39;\u0026gt; \u0026#39; } あとがき 今回はちょっと表示をいじっただけですが、他にも色々できるので試してみてください。 参考までに僕のリポジトリを置いておきます。\nGitHub - Akimon658/pwsh-profile: My PowerShell profile github.com My PowerShell profile. Contribute to Akimon658/pwsh-profile development by creating an account on GitHub.    ","date":"2021-12-12","permalink":"https://akimon658.github.io/p/2021/customize-powershell/","tags":null,"title":"PowerShell でホームディレクトリを省略する"}]