[{"content":"WSLg があるのでまぁそれでも良いんですが、Windows 側に統一できた方が楽なので。 ちなみに Debian です。\nsudo update-alternatives --install /usr/bin/x-www-browser x-www-browser 使いたいブラウザへのパス 優先度 例：\nsudo update-alternatives --install /usr/bin/x-www-browser x-www-browser /mnt/c/Program\\ Files/Google/Chrome/Application/chrome.exe 1 WSL 側にブラウザが無いならこれで終わりです。 あっても次の方法でデフォルトを設定できるので、優先度は適当でいいと思います。\nsudo update-alternatives --config x-www-browser これで Windows のブラウザを WSL のデフォルトブラウザとして使えるようになりました。\n","date":"2021-12-31","permalink":"https://akimon658.github.io/p/2021/wsl-default-browser/","tags":null,"title":"Windows のブラウザを WSL のデフォルトとして使用する"},{"content":"Gitpod  では最初から全部入りの gitpod/workspace-full  というコンテナを使えるので、基本的にはこれを使っていれば事足ります。 ただ今回は MeCab  という形態素解析エンジンと Golang で遊びたかったので、別で作っておいたイメージ  を使用しようとしました。 しかし permission 関係でちょっと詰まったので記事にしておこうと思います。\nGitpod について ブラウザから使える開発環境です。 まだ GitHub Codespaces  が使えず、また GitHub Education  の特典で月100時間無料で使えるのでお世話になっています。\n gitpod.io    やりたかったこと # 自作イメージFROMakimon658/go-mecab-neologd:latest# gopls が入っていないので入れたいRUN go install golang.org/x/tools/gopls@latestこの後適宜 go get などを実行できれば良い。\n詰まったところ /go/pkg 以下へのアクセスが全て Permission denied となってしまい go get できない。\n原因 上記の Dockerfile で go install が root として実行されてしまっているのが原因です。 なので sudo すれば解決しますが入っていないしやりたくないです。 ちなみに公式イメージ  では USER が適切に設定されているのでこういったことは起こりません。\n解決策 FROMakimon658/go-mecab-neologd:latestRUN go install golang.org/x/tools/gopls@latest \u0026amp;\u0026amp; \\  chmod 777 -R /gochmod 777 は全てのユーザーに指定した場所への読み書き・実行を許可するコマンド、-R はそれを対象ディレクトリの中身にも適用するオプションです。 これを必要なところに設定しましょう。 777 だと過剰かもしれませんが面倒だったので。\nchmod について詳しくは以下の記事がとても参考になります。\n Linuxの権限確認と変更(chmod)（超初心者向け）    あとがき 原因はすぐに分かりましたが Linux の権限周りの仕組みを全く知らなかったので解決策に辿り着くまでに1時間ぐらい溶かしました。\n","date":"2021-12-20","permalink":"https://akimon658.github.io/p/2021/gitpod-permission/","tags":null,"title":"Gitpod で自作の Docker イメージを使おうとして permission 関係で詰まった"},{"content":"PowerShell はデフォルトで現在のフルパスを表示しますが、Bash のようにホームディレクトリを ~ で置き換えてほしかったのでカスタマイズしてみました。\nProfile の準備 Bash でいう .bashrc のように、起動時に読み込まれるファイルに任意の処理を書くことで色々とカスタマイズできます。ただデフォルトでは存在しないので、touch $profile などで作成する必要があります。\nカスタマイズ 見た目に関する処理は prompt 関数に書きます。 デフォルトではこんな感じです。\nfunction prompt { $(if (Test-Path variable:/PSDebugContext) { \u0026#39;[DBG]: \u0026#39; } else { \u0026#39;\u0026#39; }) + \u0026#39;PS \u0026#39; + $(Get-Location) + $(if ($NestedPromptLevel -ge 1) { \u0026#39;\u0026gt;\u0026gt;\u0026#39; }) + \u0026#39;\u0026gt; \u0026#39; } 参考：プロンプトについて - PowerShell | Microsoft Docs  カレントディレクトリの取得に $(Get-Location) が使われていますが、これだと文字列として扱うことができません（$pwd も同様）。そこで Convert-Path を使います。\nfunction prompt { $currentDir = (Convert-Path .) $(if (Test-Path variable:/PSDebugContext) { \u0026#39;[DBG]: \u0026#39; } else { \u0026#39;\u0026#39; }) + \u0026#39;PS \u0026#39; + $currentDir + $(if ($NestedPromptLevel -ge 1) { \u0026#39;\u0026gt;\u0026gt;\u0026#39; }) + \u0026#39;\u0026gt; \u0026#39; } これで文字列として扱えるようになりました。あとは $home が含まれているかチェックして置換するだけです。\nfunction prompt { $currentDir = (Convert-Path .) if ($currentDir.Contains($HOME)) { $currentDir = $currentDir.Replace($HOME, \u0026#34;~\u0026#34;) } $(if (Test-Path variable:/PSDebugContext) { \u0026#39;[DBG]: \u0026#39; } else { \u0026#39;\u0026#39; }) + \u0026#39;PS \u0026#39; + $currentDir + $(if ($NestedPromptLevel -ge 1) { \u0026#39;\u0026gt;\u0026gt;\u0026#39; }) + \u0026#39;\u0026gt; \u0026#39; } あとがき 今回はちょっと表示をいじっただけですが、他にも色々できるので試してみてください。 参考までに僕のリポジトリを置いておきます。\ngithub.com/akimon658/pwsh-profile  ","date":"2021-12-12","permalink":"https://akimon658.github.io/p/2021/customize-powershell/","tags":null,"title":"PowerShell でホームディレクトリを省略する"}]