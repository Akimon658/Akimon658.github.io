[{"content":"Headers can be animated easily by CSS and a few JavaScript, but the speed will be constant. I hate that, so I\u0026rsquo;ll create a header that works naturally like this.\nSample code \u0026amp; Demo See the Pen Awesome header by Akimo (@akimon658) on CodePen.  This script changes the value of top by scrolling.\nconst header = document.querySelector(\u0026#34;header\u0026#34;), headerStyle = window.getComputedStyle(header), headerHeight = parseFloat(headerStyle.height); let lastPosition = 0; document.addEventListener(\u0026#34;scroll\u0026#34;, () =\u0026gt; { const currentPosition = window.scrollY, diff = currentPosition - lastPosition; let newTop = parseFloat(headerStyle.top) - diff; if (diff \u0026lt; 0) { newTop = Math.min(newTop, 0); } else { newTop = Math.max(newTop, 0 - headerHeight); } header.style.top = `${newTop}px`; lastPosition = currentPosition; }); If your header has a shadow, you also need to calculate that.\nnewTop = Math.max(newTop, 0 - headerHeight - shadowHeight) ","date":"2022-04-26","permalink":"https://akimon658.github.io/en/p/2022/awesome-header/","tags":["JavaScript"],"title":"Create a header that appears and disappears by scrolling"},{"content":"Go\u0026rsquo;s cookiejar doesn\u0026rsquo;t have any function to persistence cookies, so you need to do something to save cookies to a local file. To make it easy, you can use juju/persistent-cookiejar instead.\nGitHub - juju/persistent-cookiejar: cookiejar is a fork of net/http/cookiejar that allows serialisation of the stored cookies github.com cookiejar is a fork of net/http/cookiejar that allows serialisation of the stored cookies - GitHub - juju/persistent-cookiejar: cookiejar is a fork of net/http/cookiejar that allows serialisation o...    Usage You can use it as same as net/http/cookiejar, and can save cookies by Save.\njar, _ := cookiejar.New(nil) http.DefaultClient.Jar = jar // Some tasks  jar.Save() Where to save is decided by an option you put into New; it is set to $GOCOOKIES or $HOME/.go-cookies by default. If the file doesn\u0026rsquo;t exist, it returns no errors and creates it when saving.\njar, _ := cookiejar.New(\u0026amp;cookiejar.Options{Filename: \u0026#34;path/to/cookie\u0026#34;}) Try to use This is a sample program to log in to AtCoder. It outputs Already logged in! if you\u0026rsquo;ve already logged in, or asks your username and password if not yet.\n code Some error handlings were omitted.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;net/url\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;github.com/PuerkitoBio/goquery\u0026#34; \u0026#34;github.com/juju/persistent-cookiejar\u0026#34; \u0026#34;golang.org/x/term\u0026#34; ) func main() { jar, _ := cookiejar.New(nil) http.DefaultClient.Jar = jar defer jar.Save() // If the file exists, check whether logged in \t_, err := os.Stat(cookiejar.DefaultCookieFile()) if err == nil { doc, _ := getDocument(\u0026#34;https://atcoder.jp/home\u0026#34;) navbarRight := doc.Find(\u0026#34;div#navbar-collapse \u0026gt; ul.navbar-right\u0026#34;) if navbarRight.Children().Length() == 2 { fmt.Println(\u0026#34;Already logged in!\u0026#34;) return } } var username string fmt.Print(\u0026#34;Username: \u0026#34;) fmt.Scan(\u0026amp;username) fmt.Print(\u0026#34;Password: \u0026#34;) // Don\u0026#39;t press ctrl+c while Go reads password because your terminal won\u0026#39;t display any inputs after that. \t// To resolve it, see gist.github.com/montanaflynn/5ae3eeae7212b0ba232f46e88f1ab67f \tbypePassword, _ := term.ReadPassword(int(os.Stdin.Fd())) loginUrl := \u0026#34;https://atcoder.jp/login\u0026#34; doc, _ := getDocument(loginUrl) token, found := doc.Find(`form input[type=\u0026#34;hidden\u0026#34;]`).Attr(\u0026#34;value\u0026#34;) if !found { log.Fatal(\u0026#34;error: cannot find CSRF token\u0026#34;) } values := url.Values{ \u0026#34;username\u0026#34;: {username}, \u0026#34;password\u0026#34;: {string(bypePassword)}, \u0026#34;csrf_token\u0026#34;: {token}, } req, _ := http.NewRequest(\u0026#34;POST\u0026#34;, loginUrl, strings.NewReader(values.Encode())) req.Header.Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/x-www-form-urlencoded\u0026#34;) resp, err := http.DefaultClient.Do(req) if err != nil { log.Fatal(err) } defer resp.Body.Close() if resp.Request.URL.String() == loginUrl { log.Fatal(\u0026#34;Failed to login. Check your username/password\u0026#34;) } fmt.Println(\u0026#34;Successfully logged in!\u0026#34;) } func getDocument(url string) (*goquery.Document, error) { resp, err := http.Get(url) if err != nil { log.Fatal(err) } defer resp.Body.Close() return goquery.NewDocumentFromReader(resp.Body) }   Now you can find the cookie as a file.\n$ cat ~/.go-cookies [{\u0026#34;Name\u0026#34;:\u0026#34;REVEL_SESSION\u0026#34;,\u0026#34;Value\u0026#34;:\u0026#34;xxxxx...\u0026#34;,\u0026#34;Domain\u0026#34;:\u0026#34;atcoder.jp\u0026#34;,\u0026#34;Path\u0026#34;:\u0026#34;/\u0026#34;,\u0026#34;Secure\u0026#34;:true,\u0026#34;HttpOnly\u0026#34;:true,\u0026#34;Persistent\u0026#34;:true,\u0026#34;HostOnly\u0026#34;:true,\u0026#34;Expires\u0026#34;:\u0026#34;2022-09-13T18:19:25.9840269+09:00\u0026#34;,\u0026#34;Creation\u0026#34;:\u0026#34;2022-03-17T18:19:15.4703732+09:00\u0026#34;,\u0026#34;LastAccess\u0026#34;:\u0026#34;2022-03-17T18:19:25.9840269+09:00\u0026#34;,\u0026#34;Updated\u0026#34;:\u0026#34;2022-03-17T18:19:25.9840269+09:00\u0026#34;,\u0026#34;CanonicalHost\u0026#34;:\u0026#34;atcoder.jp\u0026#34;}] If you execute it again when the file exists,\n$ go run main.go Already logged in! it won\u0026rsquo;t ask you username/password.\n","date":"2022-03-18","permalink":"https://akimon658.github.io/en/p/2022/go-local-cookie/","tags":["Golang"],"title":"How to save cookies as a file in Golang"},{"content":"Hugo is known as a super-fast static site generator. It also has many functionaries such as shortcodes. However, it\u0026rsquo;s not good at dynamic processing because it can\u0026rsquo;t use remote files other than JSON or CSV. So we need an API server to generate link cards from URLs.\nAlthough, it\u0026rsquo;s wasteful to use a rental server and I also want to run it locally. Therefore, I decided to create a simple Docker image and use it on GitHub Actions.\nHere is the repo for the container.\nGitHub - Akimon658/ogjson: A simple server to get JSON from Open Graph meta tags github.com A simple server to get JSON from Open Graph meta tags - GitHub - Akimon658/ogjson: A simple server to get JSON from Open Graph meta tags    Generate JSON from Open Graph Just using otiai10/opengraph.\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/otiai10/opengraph\u0026#34; ) func main() { http.HandleFunc(\u0026#34;/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { ogp, err := opengraph.Fetch(r.FormValue(\u0026#34;url\u0026#34;)) if err != nil { http.Error(w, err.Error(), http.StatusInternalServerError) } w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) err = json.NewEncoder(w).Encode(ogp) if err != nil { http.Error(w, err.Error(), http.StatusInternalServerError) } }) // Using 0.0.0.0 because cannot access from outside of the container via localhost or 127.0.0.1. Please tell me better solution if you know \tlog.Fatal(http.ListenAndServe(\u0026#34;0.0.0.0:8080\u0026#34;, nil)) } And build it.\nFROMgolang:1.17.7-bullseye AS builderWORKDIR/go/src/ogjsonCOPY . .RUN go installFROMgcr.io/distroless/base-debian11COPY --from=builder /go/bin/ogjson /ogjsonCMD [\u0026#34;/ogjson\u0026#34;]Execute docker run --rm -p 8080:8080 \u0026lt;image\u0026gt;, then you\u0026rsquo;ll be able to get JSON from http://localhost:8080/?url=https://example.com\nUse service containers  Service containers are Docker containers that provide a simple and portable way for you to host services that you might need to test or operate your application in a workflow. For example, your workflow might need to run integration tests that require access to a database and memory cache.\n Ooops! docs.github.com     We can use containers by just adding the following settings to the manifest file.\njobs:# Name of the jobbuild:runs-on:ubuntu-latestservices:# Name of the serviceogjson:# Name of the image on Docker Hubimage:akimon658/ogjson:1.0.0ports:- 8080:8080Create the shortcode You must create shortcodes under layouts/shortcodes/. The file name will be the shortcode name.\nHere is the shortcode I\u0026rsquo;m using within this blog.\n\u0026lt;!-- Get argument and JSON --\u0026gt; {{ $url := .Get 0 }} {{ $json := getJSON \u0026#34;http://localhost:8080/?url=\u0026#34; $url }} \u0026lt;!-- Add target=\u0026#34;_blank\u0026#34; when opening external links --\u0026gt; \u0026lt;a href=\u0026#34;{{ $url | safeURL }}\u0026#34;{{ if strings.HasPrefix $url \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;{{ end }}\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-meta\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-title\u0026#34; title=\u0026#34;{{ $json.Title }}\u0026#34;\u0026gt;{{ $json.Title }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-host\u0026#34;\u0026gt;{{ $json.URL.Host }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-description\u0026#34; title=\u0026#34;{{ $json.Description }}\u0026#34;\u0026gt;{{ $json.Description }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Image is an array so use the first one --\u0026gt; {{ range first 1 $json.Image }} \u0026lt;img src=\u0026#34;{{ .URL }}\u0026#34; alt=\u0026#34;{{ .Alt }}\u0026#34;\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; I\u0026rsquo;m using Title, URL.Host, Description, and Image, but the JSON gives you more information.\nCall the shortcode {{\u0026lt; card \u0026#34;https://dev.to\u0026#34; \u0026gt;}} Here you can see, Hugo successfully generated a URL card!\nI think it is also useful to run on dev containers.\n","date":"2022-03-01","permalink":"https://akimon658.github.io/en/p/2022/hugo-url-cards/","tags":["Docker","Golang","Hugo"],"title":"Generate URL cards when building your Hugo site on GitHub Actions"},{"content":"The answer window.disqus_config = function() { this.language = \u0026#39;{{ .Lang }}\u0026#39;; } Why use window.disqus_config? According to the Disqus\u0026rsquo; help page, we can override the language by adding this.\nvar disqus_config = function () { this.language = \u0026#34;ja\u0026#34;; }; So basically the following JavaScript works.\nvar disqus_config = function () { this.language = \u0026#39;{{ .Lang }}\u0026#39;; }; However, the variable disqus_config doesn\u0026rsquo;t work with --minify option because Hugo changes the name.\nTo solve it, you can use a window object instead.\nvar disqus_config = function () { window.disqus_config = \u0026#39;{{ .Lang }}\u0026#39;; }; Reference:\nGlobal object - MDN Web Docs Glossary: Definitions of Web-related terms | MDN developer.mozilla.org A global object is an object that always exists in the global scope.    By the way\u0026hellip; Hugo has a Disqus template, and it was using var disqus_config so I sent a pull request. I was happy because it\u0026rsquo;s my first contribution to OSS.\nChange `disqus_config` to `window.disqus_config` by Akimon658 · Pull Request #9550 · gohugoio/hugo github.com The variable disqus_config doesn\u0026#39;t work if we use hugo --minify because Hugo changes the name. We can use window.disqus_config instead, and it won\u0026#39;t be renamed. Reference: https://developer.mozilla...    ","date":"2022-01-26","permalink":"https://akimon658.github.io/en/p/2022/disqus-multi-lang/","tags":["JavaScript","Hugo"],"title":"Use Disqus on multilingual Hugo site"},{"content":"I\u0026rsquo;m running this blog with Hugo. I love it because it\u0026rsquo;s super fast and functional, but I had a problem.\nIssue example This is [test](https://example.com), just a [sample](https://sample.test) This would output\u0026hellip;\nlike this. It rendered unnecessary space before comma or period.\nCause It was because layouts/_default/_markup/render-link.html ended with a newline.\nWhat is lender-link.html It is used with Render Hooks, which overrides default HTML rendering. For example, we can add target=\u0026quot;_blank\u0026quot; to external links by using lender-link.html. However, goldmark adds whitespace if the template ends with a newline.\nrender-link.html of Fuji, the theme I\u0026rsquo;m using as a base of this blog, ends with no newlines. However, I added a newline to the template by myself when I customize it. Some editor adds a newline of the end automatically, so please be careful\u0026hellip;\n","date":"2022-01-25","permalink":"https://akimon658.github.io/en/p/2022/hugo-whitespace/","tags":["Hugo"],"title":"Hugo adds unnecessary whitespace after a link"},{"content":"How do you usually do when you need to authorize using the browser in WSL? Copy the token? Or use WSLg? These ways are not wrong, but it will be better to use the host\u0026rsquo;s browser.\nHere is how to set it:\nsudo update-alternatives --install /usr/bin/x-www-browser x-www-browser path/to/browser priority Example:\nsudo update-alternatives --install /usr/bin/x-www-browser x-www-browser /mnt/c/Program\\ Files/Google/Chrome/Application/chrome.exe 1 That’s all if you don\u0026rsquo;t have any browser in WSL. Even if you have installed one, I don\u0026rsquo;t think you have to think seriously about priority because you can configure default by the following command.\nsudo update-alternatives --config x-www-browser Now, you can use the browser of Windows as WSL\u0026rsquo;s default.\n","date":"2021-12-31","permalink":"https://akimon658.github.io/en/p/2021/wsl-default-browser/","tags":null,"title":"How to use the browser in Windows as WSL's default"},{"content":"PowerShell displays the current full path by default. It\u0026rsquo;s long, so I\u0026rsquo;d like to replace it with ~ like Bash.\nPrepare a profile You can customize your PowerShell with $profile. It doesn\u0026rsquo;t exist by default, so you need to run touch $profile.\nCustomize To customize the prompt, use function prompt. Here is a built-in one.\nfunction prompt { $(if (Test-Path variable:/PSDebugContext) { \u0026#39;[DBG]: \u0026#39; } else { \u0026#39;\u0026#39; }) + \u0026#39;PS \u0026#39; + $(Get-Location) + $(if ($NestedPromptLevel -ge 1) { \u0026#39;\u0026gt;\u0026gt;\u0026#39; }) + \u0026#39;\u0026gt; \u0026#39; } Source:\nabout Prompts - PowerShell docs.microsoft.com Describes the `Prompt` function and demonstrates how to create a custom `Prompt` function.    It seems using $(Get-Location) to get the current path, but we can\u0026rsquo;t use it as a string (even if we use $pwd). So let\u0026rsquo;s use Convert-Path instead.\nfunction prompt { $currentDir = (Convert-Path .) $(if (Test-Path variable:/PSDebugContext) { \u0026#39;[DBG]: \u0026#39; } else { \u0026#39;\u0026#39; }) + \u0026#39;PS \u0026#39; + $currentDir + $(if ($NestedPromptLevel -ge 1) { \u0026#39;\u0026gt;\u0026gt;\u0026#39; }) + \u0026#39;\u0026gt; \u0026#39; } Now we can use $currentDir as a string. All that is left is checking if it includes $home and replacing it.\nfunction prompt { $currentDir = (Convert-Path .) if ($currentDir.Contains($HOME)) { $currentDir = $currentDir.Replace($HOME, \u0026#34;~\u0026#34;) } $(if (Test-Path variable:/PSDebugContext) { \u0026#39;[DBG]: \u0026#39; } else { \u0026#39;\u0026#39; }) + \u0026#39;PS \u0026#39; + $currentDir + $(if ($NestedPromptLevel -ge 1) { \u0026#39;\u0026gt;\u0026gt;\u0026#39; }) + \u0026#39;\u0026gt; \u0026#39; } Afterword This time we made just a little customize for PowerShell, but we can do more things with a profile. I\u0026rsquo;m happy if this article will be helpful for you.\nHere is my profile for your reference.\nGitHub - Akimon658/pwsh-profile: My PowerShell profile github.com My PowerShell profile. Contribute to Akimon658/pwsh-profile development by creating an account on GitHub.    ","date":"2021-12-13","permalink":"https://akimon658.github.io/en/p/2021/customize-powershell/","tags":null,"title":"How to replace home directory with \"~\" on PowerShell"}]